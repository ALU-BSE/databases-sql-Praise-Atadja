--1. View to show the top customers who have made the most purchases:
CREATE VIEW TopCustomers AS
-- Selects customer's first name, last name, and total purchases, ordered by total purchases in descending order
SELECT c.FirstName, c.LastName, SUM(i.Total) AS TotalPurchases
FROM Customer c
INNER JOIN Invoice i ON c.CustomerId = i.CustomerId
GROUP BY c.CustomerId
ORDER BY TotalPurchases DESC;

--2. View to show total sales for each country:
CREATE VIEW SalesByCountry AS
-- Selects billing country and the total sales amount for each country
SELECT BillingCountry, SUM(Total) AS TotalSales
FROM Invoice
GROUP BY BillingCountry;

--3. View to show the most profitable tracks:
CREATE VIEW MostProfitableTracks AS
-- Selects track name, artist name, album title, and total revenue generated by each track
SELECT t.Name AS TrackName, ar.Name AS ArtistName, a.Title AS AlbumTitle, SUM(i.Total) AS TotalRevenue
FROM Track t
INNER JOIN InvoiceLine il ON t.TrackId = il.TrackId
INNER JOIN Invoice i ON il.InvoiceId = i.InvoiceId
INNER JOIN Album a ON t.AlbumId = a.AlbumId
INNER JOIN Artist ar ON a.ArtistId = ar.ArtistId
GROUP BY t.TrackId
ORDER BY TotalRevenue DESC;

--4. View to show total sales over a period of time:
CREATE VIEW SalesOverTime AS
-- Selects the date of each invoice and the total sales amount for each date
SELECT InvoiceDate, SUM(Total) AS TotalSales
FROM Invoice
GROUP BY InvoiceDate;

--5. View to calculate the total revenue generated by each customer:
CREATE VIEW CustomerLifetimeValue AS
-- Selects customer's first name, last name, and total revenue generated by each customer
SELECT c.FirstName, c.LastName, SUM(i.Total) AS LifetimeValue
FROM Customer c
INNER JOIN Invoice i ON c.CustomerId = i.CustomerId
GROUP BY c.CustomerId;

--6. View to provide a comprehensive look at each customer's purchases:
CREATE VIEW CustomerPurchases AS
-- Selects customer's first name, last name, invoice date, and total purchase amount for each invoice
SELECT c.FirstName, c.LastName, i.InvoiceDate, i.Total AS PurchaseAmount
FROM Customer c
INNER JOIN Invoice i ON c.CustomerId = i.CustomerId;

--7. View to show how many times each album has been purchased:
CREATE VIEW AlbumSales AS
-- Selects album title and the number of times each album has been purchased
SELECT a.Title AS AlbumTitle, COUNT(i.InvoiceId) AS TimesPurchased
FROM Album a
INNER JOIN Track t ON a.AlbumId = t.AlbumId
INNER JOIN InvoiceLine il ON t.TrackId = il.TrackId
INNER JOIN Invoice i ON il.InvoiceId = i.InvoiceId
GROUP BY a.AlbumId;

--8. View to show how many times tracks from each artist have been purchased:
CREATE VIEW ArtistPopularity AS
-- Selects artist name and the number of times tracks from each artist have been purchased
SELECT ar.Name AS ArtistName, COUNT(i.InvoiceId) AS TimesPurchased
FROM Artist ar
INNER JOIN Album a ON ar.ArtistId = a.ArtistId
INNER JOIN Track t ON a.AlbumId = t.AlbumId
INNER JOIN InvoiceLine il ON t.TrackId = il.TrackId
INNER JOIN Invoice i ON il.InvoiceId = i.InvoiceId
GROUP BY ar.ArtistId;

--9. View to show how many times each track has been purchased:
CREATE VIEW TrackPopularity AS
-- Selects track name and the number of times each track has been purchased
SELECT t.Name AS TrackName, COUNT(i.InvoiceId) AS TimesPurchased
FROM Track t
INNER JOIN InvoiceLine il ON t.TrackId = il.TrackId
INNER JOIN Invoice i ON il.InvoiceId = i.InvoiceId
GROUP BY t.TrackId;

--10. View to show how many times tracks of each genre have been purchased:
CREATE VIEW GenrePopularity AS
-- Selects genre name and the number of times tracks of each genre have been purchased
SELECT g.Name AS GenreName, COUNT(i.InvoiceId) AS TimesPurchased
FROM Genre g
INNER JOIN Track t ON g.GenreId = t.GenreId
INNER JOIN InvoiceLine il ON t.TrackId = il.TrackId
INNER JOIN Invoice i ON il.InvoiceId = i.InvoiceId
GROUP BY g.GenreId;
